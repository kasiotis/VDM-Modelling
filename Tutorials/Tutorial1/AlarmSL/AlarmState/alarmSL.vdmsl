-- Chemical plant alarm model
-- State model
-- SR Oct 2013 updated for file IO Jan 2017
module AlarmState
imports from IO all, from VDMUtil all
definitions

state Plant of
  schedule : Schedule
  alarms   : set of Alarm
  inv mk_Plant(schedule,alarms) ==         
        forall a in set alarms &           -- for all alarms,
	    forall peri in set dom schedule &  -- and all time periods, 
 	      exists ex in set schedule(peri) & a.quali in set ex.quali
 	      								   -- there must be an expert on duty
 	      								   -- who is qualified for that alarm
  init pl == pl = mk_Plant(s, alarms1)     -- initial value s and alarms1 defined in values section
  end
  
types	     
  Schedule = map Period to set of Expert
  inv sch ==
   forall exps in set rng sch &
          exps <> {} and
          forall ex1, ex2 in set exps &
                 ex1 <> ex2 => ex1.expertid <> ex2.expertid;

  Period = token;

  Expert :: expertid : ExpertId
            quali    : set of Qualification
  inv ex == ex.quali <> {};

  ExpertId = token;

  Qualification = <Elec> | <Mech> | <Bio> | <Chem>;
	   
  Alarm :: alarmtext : seq of char
           quali     : Qualification

operations

  NumberOfExperts: Period ==> nat
  NumberOfExperts(peri) ==
    return card schedule(peri)
  pre peri in set dom schedule;

  ExpertIsOnDuty: Expert ==> set of Period
  ExpertIsOnDuty(ex) ==
    return {peri| peri in set dom schedule & ex in set schedule (peri)};

  ExpertToPage: Alarm * Period ==> Expert
  ExpertToPage(a,peri) ==
    let ex in set schedule(peri) be st a.quali in set ex.quali 
      in return ex
  pre peri in set dom schedule;
  
-- Extra operations to modify state
  AddExpert: Period * Expert ==> ()
  AddExpert(peri, ex) ==
    if peri in set dom schedule then schedule(peri) := schedule(peri) union {ex}
    else schedule(peri) := {ex};
    
  RemoveExpert: Period * Expert ==> ()
  RemoveExpert(peri, ex) ==
    if peri in set dom schedule then schedule(peri) := schedule(peri) \ {ex};
    
    
-- reset back to initial schedule and alarms
  ResetState: () ==> ()
  ResetState() ==
   (schedule := s;
    alarms := alarms1);
 


values

  p1:Period = mk_token("Monday day");
  p2:Period = mk_token("Monday night");
  p3:Period = mk_token("Tuesday day");
  p4:Period = mk_token("Tuesday night");
  p5:Period = mk_token("Wednesday day");
  ps : set of Period = {p1,p2,p3,p4,p5};

  eid1:ExpertId = mk_token("e1");
  eid2:ExpertId = mk_token("e2");
  eid3:ExpertId = mk_token("e3");
  eid4:ExpertId = mk_token("e4");
  eid5:ExpertId = mk_token("e5");
  eid6:ExpertId = mk_token("e6");
  eid7:ExpertId = mk_token("e7");
  eid8:ExpertId = mk_token("e8");
  
  e1:Expert = mk_Expert(eid1,{<Elec>});
  e2:Expert = mk_Expert(eid2,{<Mech>,<Chem>});
  e3:Expert = mk_Expert(eid3,{<Bio>,<Chem>,<Elec>});
  e4:Expert = mk_Expert(eid4,{<Bio>});
  e5:Expert = mk_Expert(eid5,{<Chem>,<Bio>});
  e6:Expert = mk_Expert(eid6,{<Elec>,<Chem>,<Bio>,<Mech>});
  e7:Expert = mk_Expert(eid7,{<Elec>,<Mech>});
  e8:Expert = mk_Expert(eid8,{<Mech>,<Bio>});

  s: map Period to set of Expert
     = {p1 |-> {e7,e5,e1},
        p2 |-> {e6},
        p3 |-> {e1,e3,e8},
        p4 |-> {e6}};

  a1:Alarm = mk_Alarm("Power supply missing",<Elec>);
  a2:Alarm = mk_Alarm("Tank overflow",<Mech>);
  a3:Alarm = mk_Alarm("CO2 detected",<Chem>);
  a4:Alarm = mk_Alarm("Biological attack",<Bio>);
  alarms1: set of Alarm = {a1,a2,a3,a4};

 operations
 Run: () ==> ()
 Run() ==
 (
   fprintln("\n---Start of Run---");
   
   AddExpert(p1,e6);
   fprintln("Expert e6 added to p1. e6 is now on duty at:");
   fprintln(toString(ExpertIsOnDuty(e6)));
   	
   RemoveExpert(p1,e6);
   fprintln("Expert e6 removed from p1. e6 is now on duty at:");
   fprintln(toString(ExpertIsOnDuty(e6)));
        
   fprintState();
   );
   
   
   
---- functions and operations to append output to log file
---- (do not edit!) 
 values
 outfile: seq of char = "VDM-out.txt";
 
 operations
 
 fprint: seq of char ==> ()
 fprint(string) == 
  (dcl OK: bool;
   OK := IO`fecho(outfile, string, <append>););
 
 fprintln:  seq of char ==> ()
 fprintln(string) == fprint (string ^ "\n");
 
 fprintState:() ==> ()
 fprintState() == ( 
   fprintln("Plant state:\n============");
   fprintln(toString(Plant));
   );
 
   
types  -- build a union type for all types we might want to print
basic = int | nat | nat1 | real | bool | char | token;
record = Expert | Alarm | Plant;
collection = set of basic | set of record | seq of basic | seq of record;
alltypes = basic | record | collection

functions
 toString: alltypes -> seq of char
 toString(x) == 
   VDMUtil`val2seq_of_char[alltypes](x);  
   

 end AlarmState
 